class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class StackADT:
    def __init__(self):
        self.head = None
        self.size = 0

    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
        self.size += 1
        print("Data berhasil masuk ke dalam stack")

    def top(self):
        if self.head is not None:
            return f"Top dalam stack ini adalah {self.head.data}"
        else:
            return "Stack kosong"

    def pop(self):
        if self.size > 0:
            delete_node = self.head
            self.head = self.head.next
            delete_node.next = None
            self.size -= 1
            data = delete_node.data
            del delete_node
            print(f"Data yang dikeluarkan dari stack adalah {data}")
            return data
        else:
            print("Stack kosong")

    def deleteByData(self, data):
        if self.size > 0:
            helper = self.head
            node_before_helper = None
            
            # Jika node pertama yang ingin dihapus
            if helper.data == data:
                self.head = helper.next
                helper.next = None
                del helper
                self.size -= 1
                print(f"Data berhasil dihapus: {data}")
                return
            
            while helper is not None:
                if helper.data == data:
                    node_before_helper.next = helper.next
                    helper.next = None
                    print(f"Data berhasil dihapus: {helper.data}")
                    del helper
                    self.size -= 1
                    return
                node_before_helper = helper
                helper = helper.next
        else:
            print("Stack kosong")

    def __str__(self):
        if self.size > 0:
            helper = self.head
            string = "Stack isinya adalah -- dari top sampai bawah -- \n"
            while helper is not None:
                string += f' {helper.data}'
                helper = helper.next
            return string
        else:
            return "Stack kosong"

def main():
    stack = StackADT()

    while stack.size < 10:
        try:
            num = int(input("Masukkan angka: "))
            current = stack.head
            helper = None

            # Memeriksa apakah angka sudah ada dalam stack
            while current:
                if current.data == num:
                    break
                helper = current
                current = current.next

            if current is None:  # Jika tidak ada, push di head
                stack.push(num)
            else:  # Jika ada, tidak perlu push (atau bisa implementasi lain di sini)
                print(f"Angka {num} sudah ada dalam stack, tidak ditambahkan.")

            print(stack)
        except ValueError:
            print("Masukkan harus berupa angka.")

    print("Program berhenti karena jumlah elemen di dalam stack mencapai 10.")

if __name__ == "__main__":
    main()
